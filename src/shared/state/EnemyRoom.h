// Generated by dia2code
#ifndef STATE__ENEMYROOM__H
#define STATE__ENEMYROOM__H

#include <vector>
#include <memory>

namespace state {
  class DrawPile;
  class DiscardPile;
  class Hand;
  class Room;
  class DeckParts;
  class Enemy;
}

#include "DrawPile.h"
#include "DiscardPile.h"
#include "Hand.h"
#include "Room.h"
#include "DeckParts.h"
#include "Enemy.h"

namespace state {

  /// class EnemyRoom - 
  class EnemyRoom : public state::Room {
    // Associations
    // Attributes
  private:
    std::vector<std::shared_ptr<Enemy>> enemies;
    std::vector<std::shared_ptr<DrawPile>> drawPiles;
    std::vector<std::shared_ptr<Hand>> hands;
    std::vector<std::shared_ptr<DiscardPile>> discardPiles;
    int turn;
    int EntityTurn;
    bool isGameLost;
    // Operations
  public:
    EnemyRoom ();
    int GetTurn ();
    int GetEntityTurn ();
    bool GetIsGameLost ();
    void SetIsGameLost (bool );
    std::vector<std::shared_ptr<DrawPile>> GetDrawPiles ();
    std::vector<std::shared_ptr<DiscardPile>> GetDiscardPiles ();
    std::vector<std::shared_ptr<Hand>> GetHands ();
    void SetDrawPiles (std::vector<std::shared_ptr<DrawPile>> );
    void SetDiscardPiles (std::vector<std::shared_ptr<DiscardPile>> );
    void SetHands (std::vector<std::shared_ptr<Hand>> );
    // Setters and Getters
  };

};

#endif
